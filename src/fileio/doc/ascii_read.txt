/*---------------------------------------------------------------------------
  NAME:
    ascii_read

  CALLING SEQUENCE:
    IDL> struct = ascii_read(file/lun, structdef, numrows, 
                             rows=, columns=, skiplines=, 
                             /csv, /tab, delimiter=, /whitespace, 
                             status=, verbose=, /help)
  
  PURPOSE: 

    Read ASCII data from file into a structure.  The layout of the file is
    determined by an input structure definition (e.g. {a:35, b:0L}) that is
    representative of each row in the file, and the number of records, or rows.
    
    The fields in the file can be delimited by a distinct separator such as
    comma (CSV), tab, or a user specified separator.  By default tab is
    assumed. If the /whitespace keyword is sent it is assumed no specific
    delimiter is present, but rather the file is assumed to be simply white
    space separated.  In that case strings fields must be fixed length and this
    length is determined from the input structure definition.  In other words,
    only if a separator is specified can string fields be variable length.
    
    The structure definition provides the data type describing each row of the
    file.  Particular rows or columns may be extracted by number. For very
    large files, this is a large improvement in efficiency over the IDL readf
    procedure which can only read contiguous chunks.   A set of rows/lines at
    the top of the file can also be skipped with the skiplines= keyword.

    For CSV, tab, or user-defined field delimiters the columns may be variable
    length and the user can input the string columns in structdef with any
    size because the memory will be generated on the fly.  E.g. structdef =
    {a:0L, b:'', c:0LL}. String columns are currently limited to 255
    characters and will be truncated if longer.

    Either the file name or an IDL file unit may be sent.  When a file unit is
    sent, it must be opened with the /stdio keyword and bufsize=0. 

    In general, due to the complex inputs and the fact that most files will
    have a header describing the data, this program will be used as a utility
    program and an IDL wrapper will parse the header and format the structure
    definition.

    This program is written in C++ and is linked to IDL via the DLM mechanism.


  INPUTS: 
    file/lun: Filename or file unit. For string file names, the user must 
               expand all ~ or other environment variables.  If the file
	       unit is entered, the file must be opened with the appropriate 
	       keywords:
                 openr, lun, file, /get_lun, /stdio, bufsize=0

    structdef: A structure that describes the layout of the data in each row.
                Variable length fields are not supported.
    numrows: Number of rows in the file.

  OPTIONAL INPUTS:
    rows=: An array or scalar of unique rows to read
    skiplines=: The number of lines to skip.  The newline character is 
        searched for to determine the lines, so be careful.  
    columns=: An array or scalar of unique column numbers to extract.
    /csv: The file is formatted as comma separated value.  The fields cannot 
        contain commas in this case.  Strings can be variable length in this
        case.
    /tab: The file is formatted as tab separated fields.  The fields cannot
        contain the tab character. Strings can be variable length in this
        case.
    delimiter=:  A delimiter character.  This is a string input but only the
        first character will be used if it is longer.  Strings can be 
        variable length in this case.
    /whitespace:  The fields are simply white space separated.  In this case
        the length of the strings is gotten from the input structure and
        must be fixed length.
    verbose=: 0 for standard quiet. 1 for basic info. > 1 for debug mode.
    /help: print this message.

  OPTIONAL OUTPUTS:
    status=: The status of the read. 0 for success, 1 for read failure, 
             2 for input errors such as bad file unit.

  REVISION HISTORY:
    created 20-April-2006: Erin Sheldon, NYU
    Converted to C++, 2006-July-17, E.S. NYU
    Added /tab, /whitespace and delimiter= keywords.  By default the 
        delimiter is assumed to be a tab now.  2008-03-28, E.S. NYU

  Copyright (C) 2005  Erin Sheldon, NYU.  erin dot sheldon at gmail dot com

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


 
  ---------------------------------------------------------------------------*/


