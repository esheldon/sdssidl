; You will need to source the setup file.  
/home/users/esheldon/idl_libraries/sdssidl_config/sdssidl_setup.csh

; (or .sh if you use bash)

; It will set paths as well as the default PGDATABASE environment 
; variable to the "sdss" database and PGUSER to the "sdss" user.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The basic C program is a Dynamically Loadable Module (DLM) and returns a struct.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

IDL> print,pgsql_query()
% PGSQL_QUERY: -Syntax: result=pgsql_query(query, connect_info=, file=, nrows=, /nointerrupt, /verbose, status=)
               If there are results for the query, a structure is returned.  Otherwise the result is -1
      -1

IDL> st = pgsql_query('select * from datasweep limit 100')

; you can do everything from that function, but there are some 
; classes I have written that help with some of the non-obvious
; stuff.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The basic postgres class.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

IDL> pg=obj_new('postgres')

; List info about all the tables, which you would never
; guess how to do.
IDL> pg->describe
  SCHEMANAME       TABLENAME  TABLEOWNER  TABLESPACE  HASINDEXES  HASRULES  HASTRIGGERS
      public  datasweep_meta    postgres                       0         0            0
      public       datasweep    postgres                       1         0            0

; detailed info about the 'datasweep' table.
IDL> pg->describe, 'datasweep'
** Structure <852f494>, 41 tags, length=704, data length=696, refs=1:
   PHOTOID         LONG64         94137100011000004
   RUN             LONG                94
   RERUN           INT            137
   CAMCOL          INT              1
   FIELD           INT             11
   ID              LONG                 4
   OBJC_TYPE       LONG                 3
   OBJC_FLAGS      LONG         302645268
   OBJC_FLAGS2     LONG             24600
   COLC            FLOAT     Array[5]
   PETROR50        FLOAT     Array[5]
   PETROR90        FLOAT     Array[5]
   R_DEV           FLOAT     Array[5]
   R_EXP           FLOAT     Array[5]
   STAR_LNL        FLOAT     Array[5]
   EXP_LNL         FLOAT     Array[5]
   DEV_LNL         FLOAT     Array[5]
   FLAGS           LONG      Array[5]
   FLAGS2          LONG      Array[5]
   PSP_STATUS      LONG      Array[5]
   RA              DOUBLE           336.43963
   DEC             DOUBLE         -0.83724113
   PSF_FWHM        FLOAT     Array[5]
   EXTINCTION      FLOAT     Array[5]
   PSFFLUX         FLOAT     Array[5]
   PSFFLUX_IVAR    FLOAT     Array[5]
   FIBERFLUX       FLOAT     Array[5]
   MODELFLUX       FLOAT     Array[5]
   MODELFLUX_IVAR  FLOAT     Array[5]
   PETROFLUX       FLOAT     Array[5]
   PETROFLUX_IVAR  FLOAT     Array[5]
   DEVFLUX         FLOAT     Array[5]
   DEVFLUX_IVAR    FLOAT     Array[5]
   APERFLUX        FLOAT     Array[40]
   CALIB_STATUS    INT       Array[5]
   NMGYPERCOUNT    FLOAT     Array[5]
   RESOLVE_STATUS  INT              1
   THING_ID        LONG                -1
   IFIELD          LONG                -1
   BALKAN_ID       LONG                -1
   NDETECT         INT              0
Indexes for 'datasweep'

             index                             description
------------------------------------------------------------
    datasweep_pkey            PRIMARY KEY, btree (photoid)
     datasweep_mf0                  btree ((modelflux[0]))
     datasweep_mf1                  btree ((modelflux[1]))
     datasweep_mf2                  btree ((modelflux[2]))
     datasweep_mf3                  btree ((modelflux[3]))
     datasweep_mf4                  btree ((modelflux[4]))
   datasweep_rrcfi   btree (run, rerun, camcol, field, id)

; note indexes listed at the bottom

IDL> st = pg->query('select modelflux,modelflux_ivar from datasweep where modelflux[2] > 200000.0', status=status)
IDL> if status ne pg->status_val('success') then print,'an error occured'

; you can write structures into a table.  The default user "sdss" can create
; and write to tables in the "sdss" database, but for that operation you
; will need a password file ~/.pgpass. Just ask me for the password.
IDL> st = {a:35, b:66}
IDL> pg->struct2table,st,'test_table'
IDL> pg->describe
  SCHEMANAME       TABLENAME  TABLEOWNER  TABLESPACE  HASINDEXES  HASRULES  HASTRIGGERS
      public  datasweep_meta    postgres                       0         0            0
      public       datasweep    postgres                       1         0            0
      public      test_table        sdss                       0         0            0

; Note the new table.
; This is acutally very useful for just stuffing chunks of data into a 
; table for easy retrieval later.  Ask me and I'll set you up with your 
; own database.

; Let's not clutter the sdss database with this
IDL> t=pg->query('delete from test_table')
% PGSQL_QUERY: DELETE 1
IDL> t=pg->query('vacuum test_table')
% PGSQL_QUERY: VACUUM
IDL> t=pg->query('drop table test_table')
% PGSQL_QUERY: DROP TABLE

; at some point I'll write a "delete_table" method which does the above.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Now, more SDSS specific stuff.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The sdss_postgres class inherits from postgres.  It allows 
; access to a table via SDSS ids.
IDL> sp = obj_new('sdss_postgres')
; read all objects from run 1458 that pass a cut. 
IDL> st = sp->readbyid('datasweep', 1458, columns=['photoid','modelflux'], clauses='modelflux[2] > 200000.0')
; limit to run 756, camcol 3, fields 125,150
IDL> st = sp->readbyid('datasweep', 756, 3, fields=[125, 150], columns=['ra','dec'])

; specify individual ids
; These next two are equivalent since sending a struct searches by the 
; ids in the struct.
IDL> st = sp->readbyid('datasweep', struct.run, struct.camcol, struct.field, struct.id, columns=['photoid','modelflux'])
IDL> st = sp->readbyid('datasweep', struct)

; if you have the photoids
IDL> st = sp->read_photoids('datasweep', photoids, clauses='ra > 300')

; note ra is not indexed so this would take forever. But, I have built in
; the ability to interrupt the query, so you can just hit control-c


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Let's see some documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; you can see a list of all the methods in a class.
IDL> methods,'postgres'
FUNCTION postgres::init, connect_info=connect_info
FUNCTION postgres::query, query, nrows=nrows, connect_info=connect_info, file=file, append=append, nointerrupt=nointerrupt, verbose=verbose, status=status
FUNCTION postgres::status_name, status_val
FUNCTION postgres::status_val, status_name
FUNCTION postgres::connect_info
FUNCTION postgres::query_status
FUNCTION postgres::nrows
FUNCTION postgres::tables, struct=struct, connect_info=connect_info, all=all, status=status
FUNCTION postgres::table_exists, tablename, connect_info=connect_info, status=status
FUNCTION postgres::tablerows, tablename, connect_info=connect_info, status=status
FUNCTION postgres::postgres_type, tname, length=length
FUNCTION postgres::struct2coldefs, struct, tags=tags, verbose=verbose
FUNCTION postgres::struct2tabledef, struct, tablename, file=file, primary_key=primary_key
FUNCTION postgres::cleanup
PRO postgres::set_parameters, connect_info=connect_info, query_status=query_status, nrows=nrows
PRO postgres::table_indexes, tablename, struct=struct, connect_info=connect_info, status=status
PRO postgres::describe, tablename, struct=struct, all=all, connect_info=connect_info, status=status
PRO postgres::struct2table, struct, tablename, primary_key=primary_key, status=status, tmpdir=tmpdir, connect_info=connect_info
PRO postgres::input_write, struct, file, status=status
PRO postgres::reset

; You can get the doc for a specific method with 
; the doc_method procedure.

IDL> doc_method,'sdss_postgres::readbyid'
;
; NAME:
;  postgres::readbyid
;
; PURPOSE:
;  Provides a simple way to read froma postgres table by SDSS id. The
;  user can specify runs or runs,camcols .... runs,camcols,fields.ids.
;  
;
; CALLING SEQUENCE:
;
;  res = sp->readbyid(table, runs, camcols, fields, ids, $
;                     reruns=, $
;                     columns=, $
;                     clauses=, $
;                     connect_info=, $
;                     /slow, $
;                     /verbose=, $
;                     status=)
;
;  -- OR --
; res = sp->readbyid(table, struct, ....)
;
; INPUTS:
;  table: The tablename in the current database or that specified through
;     connect_info
;  runs: Restrict the results to a specific set of runs.
;  camcols: Optional.  Restrict the query to a given set of runs,camcols.
;     There are two ways to specify these ids: 
;        * A single run with multiple camcols 
;        * Multiple runs and camcols.  For multiple runs, the user must 
;          specify *pairs* of runs and camcols to avoid confusion.
;  fields:  Optional. Restrict the query to a given set of runs,camcols,fields.
;     There are three ways to specify these ids:
;        * A single run,camcol,field set.
;        * A single run,camcol but multiple fields.
;        * Mutiple runs,camcols as well as fields.  The arrays of equal length.
;  ids: Optional. Restrict to a given set of runs,reruns,camcols,fields.ids.
;     In this case all entries must be arrays of the same length. This 
;     function converts the inputs to photoids and calls ::read_photoids()
;
;  struct: If the second input is a structure, then id information si
;     looked for and used to retrieve rows.  It is assumed a that info
;     run,camcol,field,id are to be used. I may add the ability to use
;     just certain info in the future.
; 
; OPTIONAL KEYWORD INPUTS:
;  reruns: Must match the above run inputs in dimensions. If not sent, 
;     the result of sdss_files::rerun() is used.
;  columns: Which columns to read from the table. Defaults to all ('*').
;  clauses: Added restrictions on query. e.g. "modelflux[2] > 200000.0'
;  connect_info:  List of connection options separated by semicolon.
;     e.g. "user=somename;dbname=somename"
;     http://www.postgresql.org/docs/8.0/interactive/libpq.html#LIBPQ-CONNECT
;  /slow:  Use a slower, more memory efficient method of retrieving multiple
;     queries.  Can be useful for example if reading from 10 different runs,
;     but is somewhat slower.
;  /verbose: pgsql_query() will print some informationl messges.
;
; OPTIONAL OUTPUTS:
;  status: The status of the query.  See the ::status_val() method for
;    the meaning of this output.
;
; MODIFICATION HISTORY:
;  Created: Mid-2005  Erin Sheldon Uchicago
;



; Since class file names end with __define, it's a pain
; to do doc_library on them.  You can use doc_method
; for this to

IDL> doc_method,'postgres',/class
 NAME:
  POSTGRES   (IDL Class file)


 PURPOSE:
  An IDL class file wrapping the pgsql_query() function, which provides
  an interface to the postgres database.

 CALLING SEQUENCE:
  pg = obj_new('postgres', connect_info=)

 OPTIONAL INPUTS:
  connect_info: This is stored at initialization so can be used later
    without sending. Useful if not using the database listed in the
    PGDATABASE environment variable for example.

 METHODS:
  All the functionality comes from the pgsql_query() function.  This
  class provides some wrapper methods for complex but often-used queries.
  Use:
          methods,'postgres' 

  to list the methods and 
          doc_method,'postgres::methodname' 

  to see the full documentation for each. Use 
          doc_method,'postgres',/class  (or doc_library,'postgres__define')
  to see this doc.
 

  The most useful methods:
    ::query()
       Send a query and return the results.

    ::struct2table: Stuff a structure into a postgres table, creating a
       new table if necessary.

    ::tables()
       Return a list of tables in the database.
    ::table_exists() 
       Return 1 if the table exists, 0 if not.
    ::describe
       Print a description of a table or, if no arguments, short descriptions 
       of all tables.
    ::table_indexes 
       Print index information for a table.

    ::status_val()
       Return the query status value given the name
    ::status_name()
       Return status name given the value

    ::tablerows()
       Postgres does not store the number of rows for a table, it counts them
       each time you run select count(*) from table....  If this info has been
       stored in a table called tablename_meta it is retrieved, otherwise an
       error is given and execution is stopped.

 RESTRICTIONS:



 MODIFICATION HISTORY:
   Created: Mid-2005, Erin Sheldon, Uchicago
